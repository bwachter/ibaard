.TH "todo" 3 "Thu Nov 15 2018" "ibaard" \" -*- nroff -*-
.ad l
.nh
.SH NAME
todo \- Todo List 

.IP "\fBGlobal \fBauthinfo_init\fP ()\fP" 1c
complete documentation 
.PP
\fBReturns:\fP
.RS 4
-1 on error, 0 on success  
.RE
.PP
.IP "\fBGlobal \fBauthinfo_lookup\fP (authinfo *authinfo_data)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBcati\fP (char *str,\&.\&.\&.)\fP" 1c
Add option to specify different levels of buffers to avoid the above problem 
.IP "\fBGlobal \fBemsg\fP (char *msg,\&.\&.\&.)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBfilewrite\fP (int fd, char *buf, int len)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBlmsg\fP (char *msg,\&.\&.\&.)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBlogmsg\fP (int level, char *facility, char *msg,\&.\&.\&.)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBlogmsg_fd\fP (int fd, int level, char *facility, char *msg,\&.\&.\&.)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBMAXNETBUF\fP \fP" 1c
: rework network functions to work with arbitrary buffer sizes 
.IP "\fBGlobal \fBmd\fP (char *name)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBmd2\fP (char *name, mode_t mode)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBmdclose\fP (char *maildir, char **uniqname, int fd)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBmdfind\fP (char *maildir)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBmdinit\fP (char *maildir, char *subdir, int harddelete)\fP" 1c
function is incomplete 
.PP
complete documentation  
.IP "\fBGlobal \fBmdopen\fP (char *maildir, char **uniqname)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBmduniqname\fP (char **uniqname)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetconnect\fP (char *hostname, char *servicename)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetconnect2\fP (char *hostname, char *servicename, char *bindaddress)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetfreeaddrinfo\fP (struct addrinfo *ai)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetlogportservice\fP (const struct sockaddr *sa, socklen_t salen, char *msg)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetnameinfo\fP (const struct sockaddr *sa, socklen_t salen, char *hostname, size_t hostlen, char *servname, size_t servlen, int flags)\fP" 1c
complete documentation (parameters, return value)  
.IP "\fBGlobal \fBnetread\fP (int sd, char *buf)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetreadline\fP (int sd, char *buf)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetsocket\fP (struct addrinfo *ai)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetsocket2\fP (struct addrinfo *ai, struct addrinfo *lai)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBnetwriteline\fP (int sd, char *buf)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBopenreadclose\fP (char *fn, char **buf, unsigned long *len)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBrdf\fP (char *name, char **buf)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBsplit\fP (char *buf, int c, int *len, int plus, int ofs)\fP" 1c
.IP "\fBGlobal \fBtd\fP (char *name)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBtouch\fP (char *name)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBwf\fP (char *name, char *content)\fP" 1c
complete documentation  
.IP "\fBGlobal \fBxgetcwd\fP (char *cwd)\fP" 1c
complete documentation 
.PP

